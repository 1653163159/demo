package com.example.demo.dao;

import com.example.demo.pojo.Hsk;
import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.type.JdbcType;

public interface HskMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table hsk
     *
     * @mbg.generated Fri Feb 17 10:10:45 CST 2023
     */
    @Delete({
        "delete from hsk",
        "where idhsk = #{idhsk,jdbcType=VARCHAR}"
    })
    int deleteByPrimaryKey(String idhsk);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table hsk
     *
     * @mbg.generated Fri Feb 17 10:10:45 CST 2023
     */
    @Insert({
        "insert into hsk (idhsk, level, ",
        "content, answer, ",
        "audio)",
        "values (#{idhsk,jdbcType=VARCHAR}, #{level,jdbcType=INTEGER}, ",
        "#{content,jdbcType=LONGVARBINARY}, #{answer,jdbcType=LONGVARBINARY}, ",
        "#{audio,jdbcType=LONGVARBINARY})"
    })
    int insert(Hsk row);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table hsk
     *
     * @mbg.generated Fri Feb 17 10:10:45 CST 2023
     */
    @Select({
        "select",
        "idhsk, level, content, answer, audio",
        "from hsk",
        "where idhsk = #{idhsk,jdbcType=VARCHAR}"
    })
    @Results({
        @Result(column="idhsk", property="idhsk", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="level", property="level", jdbcType=JdbcType.INTEGER),
        @Result(column="content", property="content", jdbcType=JdbcType.LONGVARBINARY),
        @Result(column="answer", property="answer", jdbcType=JdbcType.LONGVARBINARY),
        @Result(column="audio", property="audio", jdbcType=JdbcType.LONGVARBINARY)
    })
    Hsk selectByPrimaryKey(String idhsk);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table hsk
     *
     * @mbg.generated Fri Feb 17 10:10:45 CST 2023
     */
    @Select({
        "select",
        "idhsk, level, content, answer, audio",
        "from hsk",
        "order by age desc,username asc"
    })
    @Results({
        @Result(column="idhsk", property="idhsk", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="level", property="level", jdbcType=JdbcType.INTEGER),
        @Result(column="content", property="content", jdbcType=JdbcType.LONGVARBINARY),
        @Result(column="answer", property="answer", jdbcType=JdbcType.LONGVARBINARY),
        @Result(column="audio", property="audio", jdbcType=JdbcType.LONGVARBINARY)
    })
    List<Hsk> selectAll();

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table hsk
     *
     * @mbg.generated Fri Feb 17 10:10:45 CST 2023
     */
    @Update({
        "update hsk",
        "set level = #{level,jdbcType=INTEGER},",
          "content = #{content,jdbcType=LONGVARBINARY},",
          "answer = #{answer,jdbcType=LONGVARBINARY},",
          "audio = #{audio,jdbcType=LONGVARBINARY}",
        "where idhsk = #{idhsk,jdbcType=VARCHAR}"
    })
    int updateByPrimaryKey(Hsk row);

    @Select({
            "select",
            "idhsk, level, content, answer, audio",
            "from hsk",
            "where level = #{level,jdbcType=INTEGER}"
    })
    @Results({
            @Result(column="idhsk", property="idhsk", jdbcType=JdbcType.VARCHAR, id=true),
            @Result(column="level", property="level", jdbcType=JdbcType.INTEGER),
            @Result(column="content", property="content", jdbcType=JdbcType.LONGVARBINARY),
            @Result(column="answer", property="answer", jdbcType=JdbcType.LONGVARBINARY),
            @Result(column="audio", property="audio", jdbcType=JdbcType.LONGVARBINARY)
    })
    List<Hsk> selectAllByLevel(int level);
}